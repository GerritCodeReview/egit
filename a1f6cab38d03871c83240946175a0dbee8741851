{
  "comments": [
    {
      "key": {
        "uuid": "5326c650_fb13285d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 44628
      },
      "writtenOn": "2021-05-18T18:05:00Z",
      "side": 1,
      "message": "@Matthias: before you dive too deeply into the JGit apply series (thanks a lot for taking a look there!), could you maybe give some feedback on this particular point? Returning the zero ID for items in the index makes for a simple to use API and was the first idea I had, but I\u0027m not completely comfortable with it. Yet I don\u0027t see a cleaner alternative that would be equally easy to use... Would such an API be OK with you? API interface is at [1].\n\nI\u0027d like to get this API merged in EGit before M3 so that the diffmerge people have at least some time before the release to update \u0026 re-test their code.\n\n(See bug 572802 for where this whole API idea is coming from.)\n\n[1] https://git.eclipse.org/r/c/egit/egit/+/179426/3/org.eclipse.egit.core/src/org/eclipse/egit/core/info/GitInfo.java#58",
      "revId": "a1f6cab38d03871c83240946175a0dbee8741851",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fccc3258_5f690b02",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 4
      },
      "writtenOn": "2021-05-19T14:54:21Z",
      "side": 1,
      "message": "The differentiation between returning null for an item in the working tree and zeroId for an item in the index seems a bit weird. Returning null in both these cases would look more natural, since there is no commit (yet) in both cases.\nCouldn\u0027t this difference be deduced from GitItemState ?",
      "parentUuid": "5326c650_fb13285d",
      "revId": "a1f6cab38d03871c83240946175a0dbee8741851",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5983dfc1_5e6061b0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 44628
      },
      "writtenOn": "2021-05-19T15:34:23Z",
      "side": 1,
      "message": "Not sure. At any time one can for the same git path have all three. I\u0027m not sure the user would always know what had been adapted (if it was an IResource, he should know the underlying item is from the working tree, and if he adapted something else, getCommitId() returning null would be sufficient to distinguish an index item from a commit item).\n\nSo here\u0027s an alternative proposal: let\u0027s add\n\n  enum Source {\n    WORKING_TREE, INDEX, COMMIT\n  }\n\n  /**\n   * Returns the {@link Source} of the item this {@link GitInfo}\n   * object was obtained from.\n   * \u003cp\u003e\n   * {@link GitInfo} objects can be obtained via adaptation from a\n   * variety of objects. If the adapted object was an IResource,\n   * then it\u0027s a file in the git {@link Source#WORKING_TREE}, but\n   * the {@link GitInfo} might also have been obtained from a file\n   * version in the {@link Source#INDEX}, or even from a file\n   * revision in a {@link Source#COMMIT}.\n   * \u003c/p\u003e\n   *\n   * @return the {@link Source} of this {@link GitInfo} object\n   */\n  public Source getSource();\n\nand then state on getCommitId() that it returns null if the source is not Source.COMMIT.\n\nKnowing where an item \"lives\" may be important especially for such uses as in diffmerge. Without this knowledge made explicit somehow, third-party bundles will have to figure it themselves and again are likely to access internals like IndexFileRevision or some such.",
      "parentUuid": "fccc3258_5f690b02",
      "revId": "a1f6cab38d03871c83240946175a0dbee8741851",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    }
  ]
}