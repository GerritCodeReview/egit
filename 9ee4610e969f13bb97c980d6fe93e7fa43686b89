{
  "comments": [
    {
      "key": {
        "uuid": "2b250370_fd86562f",
        "filename": "org.eclipse.egit.ui/src/org/eclipse/egit/ui/internal/revision/LocationEditableRevision.java",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 440
      },
      "writtenOn": "2019-02-02T16:56:11Z",
      "side": 1,
      "message": "I\u0027ve seen the use of the new Objects.hash method before, but never like this, or-ed with the super value. Is there some documentation available about this pattern?\n\n(I typically generate those methods using the 3rd and 4th option of the eclipse wizard, and that produces different code)",
      "range": {
        "startLine": 92,
        "startChar": 26,
        "endLine": 92,
        "endChar": 27
      },
      "revId": "9ee4610e969f13bb97c980d6fe93e7fa43686b89",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e1ddf41_7d62ba0b",
        "filename": "org.eclipse.egit.ui/src/org/eclipse/egit/ui/internal/revision/LocationEditableRevision.java",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 44628
      },
      "writtenOn": "2019-02-02T17:43:31Z",
      "side": 1,
      "message": "I never had problems with xor-ing hashes. Don\u0027t know if something like (super.hashCode * 31) + Objects.hash(...) is\nany better.",
      "parentUuid": "2b250370_fd86562f",
      "range": {
        "startLine": 92,
        "startChar": 26,
        "endLine": 92,
        "endChar": 27
      },
      "revId": "9ee4610e969f13bb97c980d6fe93e7fa43686b89",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a6083f8_cd2dffa1",
        "filename": "org.eclipse.egit.ui/src/org/eclipse/egit/ui/internal/revision/LocationEditableRevision.java",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 44628
      },
      "writtenOn": "2019-02-03T13:05:30Z",
      "side": 1,
      "message": "Xor would only be a problem if the two values could ever be the same. (a\u003d\u003db \u003d\u003e a^b\u003d\u003d0)\n\nWe have other places where we use xor to combine hashes. Maybe changing them all to 31*a + b would be safer...\n\nBut if so, we should do it for all in a follow-up commit.",
      "parentUuid": "4e1ddf41_7d62ba0b",
      "range": {
        "startLine": 92,
        "startChar": 26,
        "endLine": 92,
        "endChar": 27
      },
      "revId": "9ee4610e969f13bb97c980d6fe93e7fa43686b89",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b69e0bf_07cc9203",
        "filename": "org.eclipse.egit.ui/src/org/eclipse/egit/ui/internal/revision/ResourceEditableRevision.java",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 440
      },
      "writtenOn": "2019-02-02T16:56:11Z",
      "side": 1,
      "message": "using an annotation on one argument, and an assertion on another looks slightly confusing :)",
      "range": {
        "startLine": 54,
        "startChar": 3,
        "endLine": 57,
        "endChar": 36
      },
      "revId": "9ee4610e969f13bb97c980d6fe93e7fa43686b89",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b2d026e7_21ff7ffa",
        "filename": "org.eclipse.egit.ui/src/org/eclipse/egit/ui/internal/revision/ResourceEditableRevision.java",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 44628
      },
      "writtenOn": "2019-02-02T17:43:31Z",
      "side": 1,
      "message": "Yes, perhaps I should just leave this as it was. I\u0027ll have to check why I didn\u0027t use @NonNull on the runnableContext. Probably because it caused null-warnings at the call sites.",
      "parentUuid": "0b69e0bf_07cc9203",
      "range": {
        "startLine": 54,
        "startChar": 3,
        "endLine": 57,
        "endChar": 36
      },
      "revId": "9ee4610e969f13bb97c980d6fe93e7fa43686b89",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2c0f135_3f148759",
        "filename": "org.eclipse.egit.ui/src/org/eclipse/egit/ui/internal/revision/ResourceEditableRevision.java",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 44628
      },
      "writtenOn": "2019-02-03T13:01:41Z",
      "side": 1,
      "message": "@NonNull IFile file resolves a null warning on the super call (getResourceEncoding(file) in line 55).\n\nAdding a @NonNull on IRunnableContext gives indeed null warnings at the call sites.\n\nNot sure what the best approach would be:\n* Leave as it was and accept the null warning on line 55.\n* Leave as is.\n* Add @NonNull to IRunnableContext and add (actually unnecessary) null checks at call sites.",
      "parentUuid": "b2d026e7_21ff7ffa",
      "range": {
        "startLine": 54,
        "startChar": 3,
        "endLine": 57,
        "endChar": 36
      },
      "revId": "9ee4610e969f13bb97c980d6fe93e7fa43686b89",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}