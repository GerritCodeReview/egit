{
  "comments": [
    {
      "key": {
        "uuid": "a766b734_be856460",
        "filename": "org.eclipse.egit.core/src/org/eclipse/egit/core/internal/indexdiff/GitResourceDeltaVisitor.java",
        "patchSetId": 4
      },
      "lineNbr": 151,
      "author": {
        "id": 1179
      },
      "writtenOn": "2014-12-10T13:22:08Z",
      "side": 1,
      "message": "Calling isIgnoredInOldIndex() for files could be still expensive (will split paths for each file and do in worst case filesInDelta * path.segmentsCount() lookups).\n\nBefore returning false or true here we could collect *known* ignored/not ignored directories state in the temporary map (key \u003d path, value \u003d boolean) and so remember the \"known\" path state there, saving us the lookup.\n\nFor files which are located in the same directory structure the lookup will be fast because the map will contain already all parents after first \"while\" round.\n\nAt the end we will have something like filesInDelta*2 + max (segmentsCount()) lookups for files from the same tree.",
      "revId": "7b9882916f28bc5dacc66da54117d223fc78cced",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a766b734_d9b4ba1f",
        "filename": "org.eclipse.egit.core/src/org/eclipse/egit/core/internal/indexdiff/GitResourceDeltaVisitor.java",
        "patchSetId": 4
      },
      "lineNbr": 151,
      "author": {
        "id": 326
      },
      "writtenOn": "2014-12-10T13:34:52Z",
      "side": 1,
      "message": "Hm, I know what you mean. I\u0027m not sure whether this wouldn\u0027t cause more overhead than it would shove off the times. The visitor is re-created for every resource change event. It could potentially be a lot of resources, yes, but it\u0027s just as common that it\u0027s only a few. This code is not sooo expensive, I think.\n\nStill I can give it a try if you insist.",
      "parentUuid": "a766b734_be856460",
      "revId": "7b9882916f28bc5dacc66da54117d223fc78cced",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a766b734_d9db1a61",
        "filename": "org.eclipse.egit.core/src/org/eclipse/egit/core/internal/indexdiff/GitResourceDeltaVisitor.java",
        "patchSetId": 4
      },
      "lineNbr": 151,
      "author": {
        "id": 1179
      },
      "writtenOn": "2014-12-10T13:55:56Z",
      "side": 1,
      "message": "My problem is my huge repository and after spending lot of time to optimize j/egit performance I fear any new possible regression :-)\nLook, if I have only 1000 ignored directories in the repo (and I fear I have much more) and the average path segments count of files is over 15, for only 10 delta files I have here 1000 * 15 * 10 \u003d 150000 lookups which sounds a bit more then 35 (10*2 + 15).\n\nFor sure, for a small projects like e/jgit this optimization doesn\u0027t make sense, because the absolute times here are probably equal for any solution one can imagine.",
      "parentUuid": "a766b734_d9b4ba1f",
      "revId": "7b9882916f28bc5dacc66da54117d223fc78cced",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a766b734_59fa6aaf",
        "filename": "org.eclipse.egit.core/src/org/eclipse/egit/core/internal/indexdiff/GitResourceDeltaVisitor.java",
        "patchSetId": 4
      },
      "lineNbr": 151,
      "author": {
        "id": 326
      },
      "writtenOn": "2014-12-10T14:02:41Z",
      "side": 1,
      "message": "Yes, we also have a huge repository, and our workspace has very, very easily more than 1000 ignored directories. The thing I\u0027m saying is that it might bring not the benefit you expect to cache this information, as eclipse will fire deltas that include at the very most deltas for a single plugin (if you\u0027re lucky), not more (at least that\u0027s what I see during builds). Thus that optimization will only hit inside a single plugin. I can still do it, as I said.",
      "parentUuid": "a766b734_d9db1a61",
      "revId": "7b9882916f28bc5dacc66da54117d223fc78cced",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a766b734_59370ae6",
        "filename": "org.eclipse.egit.core/src/org/eclipse/egit/core/internal/indexdiff/GitResourceDeltaVisitor.java",
        "patchSetId": 4
      },
      "lineNbr": 151,
      "author": {
        "id": 326
      },
      "writtenOn": "2014-12-10T14:58:55Z",
      "side": 1,
      "message": "I did a performance comparision, one version as we have it here, and one with a cache. It basically remembers the result for every path that it checks. When compiling (that is removing and adding the .class files) 40.000 java sources in my workspace, the caching version is quite a bit slower (reproducible). I took three samples each, and on average it\u0027s ~5:20 for the current version vs. ~5:30 for the optimized version ... 10 seconds slower?! I re-measured everything, and get the same results. The optimization is basically what you suggested. I would have guessed that it improves, but only a little - on the contrary:\n\n\tprivate boolean isIgnoredInOldIndex(IndexDiffCacheEntry entry, String path) {\n\t\t// fall back to processing all changes as long as there is no old index.\n\t\tif (entry \u003d\u003d null || gitIgnoreChanged)\n\t\t\treturn false;\n\n\t\tBoolean cached \u003d knownIgnoredPaths.get(path);\n\t\tif (cached !\u003d null) {\n\t\t\treturn cached.booleanValue();\n\t\t}\n\n\t\tIndexDiffData indexDiff \u003d entry.getIndexDiff();\n\t\tif (indexDiff \u003d\u003d null)\n\t\t\treturn false;\n\n\t\tboolean result \u003d false;\n\t\tString p \u003d path;\n\t\tSet\u003cString\u003e ignored \u003d indexDiff.getIgnoredNotInIndex();\n\t\tSet\u003cString\u003e candidates \u003d new HashSet\u003cString\u003e();\n\t\twhile (p !\u003d null) {\n\t\t\tcandidates.add(p);\n\n\t\t\tif (ignored.contains(p)) {\n\t\t\t\tresult \u003d true;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tp \u003d skipLastSegment(p);\n\t\t}\n\n\t\tfor (String candidate : candidates) {\n\t\t\tknownIgnoredPaths.put(candidate, Boolean.valueOf(result));\n\t\t}\n\n\t\treturn result;\n\t}",
      "parentUuid": "a766b734_59fa6aaf",
      "revId": "7b9882916f28bc5dacc66da54117d223fc78cced",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}