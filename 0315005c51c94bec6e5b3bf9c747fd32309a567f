{
  "comments": [
    {
      "key": {
        "uuid": "9e97ff27_70543fb2",
        "filename": "org.eclipse.egit.core/src/org/eclipse/egit/core/CachingRepository.java",
        "patchSetId": 2
      },
      "lineNbr": 87,
      "author": {
        "id": 440
      },
      "writtenOn": "2019-11-09T09:36:02Z",
      "side": 1,
      "message": "What do you think about adding logging for !doCache and level\u003d\u003d0? That way wrong usage of the API wouldn\u0027t go unnoticed.",
      "revId": "0315005c51c94bec6e5b3bf9c747fd32309a567f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5125ed0a_bda2c12f",
        "filename": "org.eclipse.egit.core/src/org/eclipse/egit/core/ConfigScope.java",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 440
      },
      "writtenOn": "2019-11-09T09:36:02Z",
      "side": 1,
      "message": "I do understand that the try-with-resource mechanism guarantees cleanup for deleting the cache. However, I find it confusing to create an object here, that I probably don\u0027t use in most of the egit operations that may appear inside the try.\n\nI therefore typically favor lambda syntax with single method functions for such operations, like disableLoggingWhile(lambda) etc. Would that be an alternative to your current syntax suggestion? Or are there are reasons for the above syntax that I missed?",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 29,
        "endChar": 4
      },
      "revId": "0315005c51c94bec6e5b3bf9c747fd32309a567f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23d4c590_cb4a6d1f",
        "filename": "org.eclipse.egit.core/src/org/eclipse/egit/core/RepositoryHandle.java",
        "patchSetId": 2
      },
      "lineNbr": 153,
      "author": {
        "id": 440
      },
      "writtenOn": "2019-11-09T09:36:02Z",
      "side": 1,
      "message": "I was just starting to comment that this would be more nice by having it implemented as a forwarded close() call in all subclasses of the hierarchy of the delegate, instead of doing type checks here.\nBut if I get it right, that would interfere with the super call in the next line, since the hierarchy of the delegate member and our hierarchy overlap. So probably nothing to improve here. :)",
      "range": {
        "startLine": 151,
        "startChar": 0,
        "endLine": 153,
        "endChar": 3
      },
      "revId": "0315005c51c94bec6e5b3bf9c747fd32309a567f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}