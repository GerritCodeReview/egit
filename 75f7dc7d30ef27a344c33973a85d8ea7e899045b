{
  "comments": [
    {
      "key": {
        "uuid": "5be138c1_6aea3051",
        "filename": "org.eclipse.egit.core/src/org/eclipse/egit/core/op/RewordCommitOperation.java",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 44628
      },
      "writtenOn": "2020-12-06T22:57:07Z",
      "side": 1,
      "message": "Maybe this doesn\u0027t even have to be an IWorkspaceRunnable anymore. reword() doesn\u0027t touch the working tree at all. Scheduling is ensured already by the RewordHandler, which runs this in a WorkspaceJob with this scheduling rule?",
      "revId": "75f7dc7d30ef27a344c33973a85d8ea7e899045b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28718419_039f76cb",
        "filename": "org.eclipse.egit.core/src/org/eclipse/egit/core/op/RewordCommitOperation.java",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 4
      },
      "writtenOn": "2020-12-08T00:06:05Z",
      "side": 1,
      "message": "I agree, this seems unnecessary",
      "parentUuid": "5be138c1_6aea3051",
      "revId": "75f7dc7d30ef27a344c33973a85d8ea7e899045b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52765177_f3df8c69",
        "filename": "org.eclipse.egit.core/src/org/eclipse/egit/core/op/RewordCommitOperation.java",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 44628
      },
      "writtenOn": "2020-12-08T23:21:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "28718419_039f76cb",
      "revId": "75f7dc7d30ef27a344c33973a85d8ea7e899045b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "553ca440_8d84d54e",
        "filename": "org.eclipse.egit.core/src/org/eclipse/egit/core/op/RewordCommitOperation.java",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 44628
      },
      "writtenOn": "2020-12-06T22:57:07Z",
      "side": 1,
      "message": "We don\u0027t touch the index. Not sure locking the index is 100% correct, but what is the way to guard against concurrent changes to HEAD or the branch HEAD points to?",
      "revId": "75f7dc7d30ef27a344c33973a85d8ea7e899045b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc3a61f2_253e5c1f",
        "filename": "org.eclipse.egit.core/src/org/eclipse/egit/core/op/RewordCommitOperation.java",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 4
      },
      "writtenOn": "2020-12-08T00:06:05Z",
      "side": 1,
      "message": "I think the index should not be locked since neither working tree nor index content are affected. This reword operation could be even used on a bare repository which doesn\u0027t have an index. Not sure if that\u0027s a use case for EGit. Gerrit has similar in-memory implementations to auto-merge, auto-rebase or cherry-pick a change on the server side when it is submitted and the update of the target branch isn\u0027t a fast-forward so that it requires an auto- merge, cherry-pick or rebase depending on project configuration.\n\nCreating the chain of rewritten commits doesn\u0027t require locking since it\u0027s only creating new immutable objects. Locking the affected ref (the current branch if reword is started from a checked out branch or HEAD if we start from a detached HEAD) is handled by RefUpdate. See e.g. [1]. HEAD doesn\u0027t need to be locked if it refers to a branch since it will not be modified by the reword and after the reword operation HEAD will be unchanged and still refer to the same branch. Only if reword is done from detached HEAD the HEAD needs to be locked.\n\n[1] https://git.eclipse.org/r/plugins/gitiles/jgit/jgit/+/refs/heads/master/org.eclipse.jgit/src/org/eclipse/jgit/api/CheckoutCommand.java#257",
      "parentUuid": "553ca440_8d84d54e",
      "revId": "75f7dc7d30ef27a344c33973a85d8ea7e899045b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d42c6b8d_e275d689",
        "filename": "org.eclipse.egit.core/src/org/eclipse/egit/core/op/RewordCommitOperation.java",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 44628
      },
      "writtenOn": "2020-12-08T23:21:57Z",
      "side": 1,
      "message": "I\u0027m not worried about concurrent changes to HEAD or to the branch it points to during the RefUpdate. However, since nothing is locked during all this rebasing, some other concurrent operation might have changed HEAD or the branch it points to while we were creating all these new rebased commits. The RefUpdate will then fail, and all the work was in vain.\n\nBut I see nothing in RefDatabase that would allow me to selectively lock some refs.\n\nSo probably this is the best we can do here.",
      "parentUuid": "bc3a61f2_253e5c1f",
      "revId": "75f7dc7d30ef27a344c33973a85d8ea7e899045b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "887b776b_9ebf0665",
        "filename": "org.eclipse.egit.core/src/org/eclipse/egit/core/op/RewordCommitOperation.java",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 4
      },
      "writtenOn": "2020-12-09T00:10:28Z",
      "side": 1,
      "message": "I think we would need another RefUpdate subclass similar to BatchRefUpdate for this local use case. BatchRefUpdate is made to work with ReceiveCommands created by ReceivePack so it seems not suitable for this local use case.",
      "parentUuid": "d42c6b8d_e275d689",
      "revId": "75f7dc7d30ef27a344c33973a85d8ea7e899045b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "326fa3e8_aa88e6c6",
        "filename": "org.eclipse.egit.core/src/org/eclipse/egit/core/op/RewordCommitOperation.java",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 44628
      },
      "writtenOn": "2020-12-09T08:00:23Z",
      "side": 1,
      "message": "Unless I\u0027m missing something fundamental, writing ORIG_HEAD also is not safe. It\u0027s not a ref in JGit but just a normal file. C git handles it as a ref (with all the locking involved), and even sets it before it sets HEAD, so when setting ORIG_HEAD fails, HEAD is still unchanged. See for instance C git\u0027s \"reset\" implementation.[1] (ORIG_HEAD appears to be written only in reset and rebase.)\n\nPerhaps locking the index wasn\u0027t wrong.\n\n[1] https://github.com/git/git/blob/bf10200/reset.c#L98",
      "parentUuid": "887b776b_9ebf0665",
      "revId": "75f7dc7d30ef27a344c33973a85d8ea7e899045b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c51bb0d0_cd3cab1b",
        "filename": "org.eclipse.egit.core/src/org/eclipse/egit/core/op/RewordCommitOperation.java",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 4
      },
      "writtenOn": "2020-12-09T09:57:31Z",
      "side": 1,
      "message": "yes, symbolic refs should use class SymbolicRef and RefUpdate which apparently isn\u0027t done for ORIG_HEAD.\n\nyeah, maybe it wasn\u0027t a bad idea to lock the index, except for bare repos (didn\u0027t try if that would work with this implementation)",
      "parentUuid": "326fa3e8_aa88e6c6",
      "revId": "75f7dc7d30ef27a344c33973a85d8ea7e899045b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d69b5da4_ea32a391",
        "filename": "org.eclipse.egit.core/src/org/eclipse/egit/core/op/RewordCommitOperation.java",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 44628
      },
      "writtenOn": "2020-12-09T10:04:07Z",
      "side": 1,
      "message": "\u003e bare repos (didn\u0027t try if that would work with this implementation)\n\nEnablement still tests for repo state SAFE, so the command should not be available for bare repos.",
      "parentUuid": "c51bb0d0_cd3cab1b",
      "revId": "75f7dc7d30ef27a344c33973a85d8ea7e899045b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2db01131_2f714b14",
        "filename": "org.eclipse.egit.core/src/org/eclipse/egit/core/op/RewordCommitOperation.java",
        "patchSetId": 2
      },
      "lineNbr": 195,
      "author": {
        "id": 4
      },
      "writtenOn": "2020-12-08T00:06:05Z",
      "side": 1,
      "message": "I think reword should write a reflog entry otherwise it doesn\u0027t reflect what happened. How about writing the same reflog entry which interactive rebase would write for the same action ?",
      "revId": "75f7dc7d30ef27a344c33973a85d8ea7e899045b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "404465d6_0747ea2f",
        "filename": "org.eclipse.egit.core/src/org/eclipse/egit/core/op/RewordCommitOperation.java",
        "patchSetId": 2
      },
      "lineNbr": 195,
      "author": {
        "id": 44628
      },
      "writtenOn": "2020-12-08T23:21:57Z",
      "side": 1,
      "message": "I\u0027ve added a similar reflog message. Exactly the same appears difficult; the current implementation would write \"commit (amend): \u003cNew short message\u003e\" followed by umpteen \"rebase: \u003cshort message\u003e\" entries, and finally a \"rebase finished: returning to ...\" entry.\n\nThe new implementation updates HEAD only once, so one reflog message is appropriate.",
      "parentUuid": "2db01131_2f714b14",
      "revId": "75f7dc7d30ef27a344c33973a85d8ea7e899045b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "629978b0_33e72a76",
        "filename": "org.eclipse.egit.ui/src/org/eclipse/egit/ui/internal/history/command/RewordHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 44628
      },
      "writtenOn": "2020-12-06T22:57:07Z",
      "side": 1,
      "message": "Hm. Why are two RewordHandlers? I don\u0027t get it.",
      "revId": "75f7dc7d30ef27a344c33973a85d8ea7e899045b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7535fa7e_ddd0abb2",
        "filename": "org.eclipse.egit.ui/src/org/eclipse/egit/ui/internal/history/command/RewordHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 4
      },
      "writtenOn": "2020-12-08T00:06:05Z",
      "side": 1,
      "message": "I can\u0027t remember why this was done",
      "parentUuid": "629978b0_33e72a76",
      "revId": "75f7dc7d30ef27a344c33973a85d8ea7e899045b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0f745d6_dc636e76",
        "filename": "org.eclipse.egit.ui/src/org/eclipse/egit/ui/internal/history/command/RewordHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 44628
      },
      "writtenOn": "2020-12-08T23:21:57Z",
      "side": 1,
      "message": "I\u0027ll take a look at this in a later change. The one in internal/commit/command is even a default handler, which definitely looks wrong. It\u0027s accessible via Quick Access, can be invoked via Quick Access on commits not reachable from HEAD (for instance, if such a commit is shown in a commit editor), then appears to do nothing. This is either just plain wrong, or it\u0027s unfinished business.",
      "parentUuid": "7535fa7e_ddd0abb2",
      "revId": "75f7dc7d30ef27a344c33973a85d8ea7e899045b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}